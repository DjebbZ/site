#!/usr/bin/env planck
(ns site.update-docs
  (:require
    [cljs.reader :refer [read-string]]
    [clojure.string :refer [join]]
    [planck.core :refer [slurp spit]]
    [planck.shell :refer [sh]]))

(def root-docs "site-jekyll/docs")
(def root-data "site-jekyll/_data")

(defn get-api-data!
  "Get the latest api docs data structure for ClojureScript."
  ([] (get-api-data! true))
  ([update-api?]
   (let [url "https://raw.githubusercontent.com/cljsinfo/cljs-api-docs/catalog/cljs-api.edn"
         filename "cljs-api.edn"]
     (when update-api?
       (println "Retrieving" url "...")
       (sh "rm" "-f" filename)
       (sh "wget" url))
     (read-string (slurp filename)))))

(defn create-namespace-dirs!
  "Create directories to hold the symbol files for each namespace."
  [api]
  (let [nss (keys (:namespaces api))]
    (println (str "Creating namespace directories (" (count nss) ") at " root-docs "/* ..."))
    (let [ns->dir #(str root-docs "/" %)
          dirs (map ns->dir nss)]
      (apply sh "mkdir" "-p" dirs))))

(defn ns->layout
  [ns-]
  ;; (if (= "syntax" ns-) "syntax" "symbol")
  "symbol")

(defn sym-file-content
  "Generate the file content for the given symbol."
  [sym]
  (join "\n"
    ["---"
     "# Auto-generated by update-docs.cljs"
     (str "layout: " (ns->layout (:ns sym)))
     (str "symbol: " (:full-name sym))
     "---"]))

(defn create-symbol-md-files!
  "Generate all the symbol markdown files.
  (tells Jekyll to generate a page for every symbol.)"
  [api]
  (let [syms (vals (:symbols api))]
    (println (str "Creating symbol md files (" (count syms) ") at " root-docs "/<ns>/*.md ..."))
    (doseq [sym syms]
      (let [filename (str root-docs "/" (:full-name-encode sym) ".md")]
        (spit filename (sym-file-content sym))))))

(defn create-symbols-json-file!
  "Create symbol data file in JSON.
  (allows the site-jekyll/_layouts/symbol.html file to lookup symbol data.)"
  [api]
  (let [filename (str root-data "/symbols.json")
        json (clj->js (:symbols api))
        content (js/JSON.stringify json nil 2)]
    (println (str "Creating symbols json file at " filename " ..."))
    (spit filename content)))

(defn main []
  (let [api (get-api-data!)]
    (create-namespace-dirs! api)
    (create-symbol-md-files! api)
    (create-symbols-json-file! api)))

(main)
